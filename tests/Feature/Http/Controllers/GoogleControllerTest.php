<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\GoogleController
 */
class GoogleControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function store990n_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'store990N',
            \App\Http\Requests\Store990NGoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store990_n_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/store990n/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storeaward1_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeAward1',
            \App\Http\Requests\StoreAward1GoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_award1_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/storeAward1/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storeaward2_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeAward2',
            \App\Http\Requests\StoreAward2GoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_award2_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/storeAward2/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storeaward3_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeAward3',
            \App\Http\Requests\StoreAward3GoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_award3_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/storeAward3/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storeaward4_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeAward4',
            \App\Http\Requests\StoreAward4GoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_award4_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/storeAward4/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storeaward5_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeAward5',
            \App\Http\Requests\StoreAward5GoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_award5_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/storeAward5/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storeein_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeEIN',
            \App\Http\Requests\StoreEINGoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_e_i_n_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/storeEIN/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storeresources_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeResources',
            \App\Http\Requests\StoreResourcesGoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_resources_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $resources = \App\Models\Resources::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('store.resources', ['id' => $id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storeroster_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeRoster',
            \App\Http\Requests\StoreRosterGoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_roster_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/storeRoster/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storestatement1_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeStatement1',
            \App\Http\Requests\StoreStatement1GoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_statement1_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/storeStatement1/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function storestatement2_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\GoogleController::class,
            'storeStatement2',
            \App\Http\Requests\StoreStatement2GoogleRequest::class
        );
    }

    /**
     * @test
     */
    public function store_statement2_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post('files/storeStatement2/{id}', [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    // test cases...
}
