<?php

namespace Tests\Feature\Http\Controllers;

use PHPUnit\Framework\Attributes\Test;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\BoardController
 */
class BoardControllerTest extends TestCase
{
    use RefreshDatabase;

    #[Test]
    public function create_board_info_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $board = \App\Models\Board::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('boardinfo.createboardinfo', ['id' => $board->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/login');

        // TODO: perform additional assertions
    }

    #[Test]
    public function member_update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $board = \App\Models\Board::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('member.update', ['id' => $board->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/home');

        // TODO: perform additional assertions
    }

    #[Test]
    public function print_financial_report_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $board = \App\Models\Board::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('board.printfinancial', ['id' => $board->id]));

        $response->assertRedirect('/login');

        // TODO: perform additional assertions
    }

    #[Test]
    public function print_financial_report2_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $board = \App\Models\Board::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('board.printfinancial2', ['id' => $board->id]));

        $response->assertRedirect('/login');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_board_info_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('boardinfo.showboardinfo'));

        $response->assertOk();
        $response->assertViewIs('boards.boardinfo');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_financial_report_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $board = \App\Models\Board::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('board.showfinancial', ['id' => $board->id]));

        $response->assertOk();
        $response->assertViewIs('boards.financial');

        // TODO: perform additional assertions
    }

    #[Test]
    public function store_financial_report_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $board = \App\Models\Board::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('board.storefinancial', ['id' => $board->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    #[Test]
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();
        $board = \App\Models\Board::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('board.update', ['id' => $board->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/login');

        // TODO: perform additional assertions
    }

    // test cases...
}
