<?php

namespace Tests\Feature\Http\Controllers;

use PHPUnit\Framework\Attributes\Test;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\ChapterController
 */
class ChapterControllerTest extends TestCase
{
    use RefreshDatabase;

    #[Test]
    public function awards_view_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.awardsview', ['id' => $chapter->id]));

        $response->assertOk();
        $response->assertViewIs('chapters.awardsview');

        // TODO: perform additional assertions
    }

    #[Test]
    public function boundaryview_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.boundaryview', ['id' => $chapter->id]));

        $response->assertOk();
        $response->assertViewIs('chapters.boundaryview');

        // TODO: perform additional assertions
    }

    #[Test]
    public function chapter_disband_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('chapter.disband'), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/chapter/zapped');

        // TODO: perform additional assertions
    }

    #[Test]
    public function chapter_links_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('chapter.links'));

        $response->assertOk();
        $response->assertViewIs('chapterlinks');
        $response->assertViewHas('link_array_intl');
        $response->assertViewHas('link_array_usa');

        // TODO: perform additional assertions
    }

    #[Test]
    public function chapter_reset_password_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('chapter.resetpswd'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function check_email_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('check.email', ['id' => $chapter->id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function check_report_id_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('check.reportid', ['id' => $chapter->id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function create_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapters.create'));

        $response->assertOk();
        $response->assertViewIs('chapters.create');

        // TODO: perform additional assertions
    }

    #[Test]
    public function create_board_info_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('chapter.createboardinfo', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/yearreports/boardinfo');

        // TODO: perform additional assertions
    }

    #[Test]
    public function create_donation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapter.createdonation', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/reports/m2mdonation');

        // TODO: perform additional assertions
    }

    #[Test]
    public function edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get('chapter/edit/{id}');

        $response->assertOk();
        $response->assertViewIs('chapters.edit');

        // TODO: perform additional assertions
    }

    #[Test]
    public function edit_website_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get('chapter/website/edit/{id}');

        $response->assertOk();
        $response->assertViewIs('chapters.editweb');

        // TODO: perform additional assertions
    }

    #[Test]
    public function get_email_details_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('get.emaildetails', ['id' => $chapter->id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function inquiriesview_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.inquiriesview', ['id' => $chapter->id]));

        $response->assertOk();
        $response->assertViewIs('chapters.inquiriesview');

        // TODO: perform additional assertions
    }

    #[Test]
    public function late_re_registration_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapters = \App\Models\Chapter::factory()->times(3)->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.latereminder'));

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    #[Test]
    public function list_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.list'));

        $response->assertOk();
        $response->assertViewIs('chapters.list');

        // TODO: perform additional assertions
    }

    #[Test]
    public function make_payment_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapter.makepayment', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/chapter/re-registration');

        // TODO: perform additional assertions
    }

    #[Test]
    public function make_re_reg_notes_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapter.makereregnotes', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/chapter/re-registration');

        // TODO: perform additional assertions
    }

    #[Test]
    public function reminder_re_registration_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapters = \App\Models\Chapter::factory()->times(3)->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.reminder'));

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_board_info_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('chapter.showboardinfo', ['id' => $chapter->id]));

        $response->assertOk();
        $response->assertViewIs('chapters.boardinfo');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_donation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('chapter.donation', ['id' => $chapter->id]));

        $response->assertOk();
        $response->assertViewIs('chapters.m2mdonation');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_financial_report_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.showfinancial', ['id' => $chapter->id]));

        $response->assertOk();
        $response->assertViewIs('chapters.financial');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_inquiries_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.inquiries'));

        $response->assertOk();
        $response->assertViewIs('chapters.inquiries');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_int_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.inter'));

        $response->assertOk();
        $response->assertViewIs('chapters.international');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_int_chapter_view_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get('chapter/international/view/{id}');

        $response->assertOk();
        $response->assertViewIs('chapters.intchapterview');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_int_zapped_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.interzap'));

        $response->assertOk();
        $response->assertViewIs('chapters.intzapped');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_int_zapped_chapter_view_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get('chapter/international/zapped/view/{id}');

        $response->assertOk();
        $response->assertViewIs('chapters.intzapview');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_payment_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('chapter.payment', ['id' => $chapter->id]));

        $response->assertOk();
        $response->assertViewIs('chapters.payment');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_re_reg_notes_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('chapter.reregnotes', ['id' => $chapter->id]));

        $response->assertOk();
        $response->assertViewIs('chapters.re-regnotes');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_re_registration_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.registration'));

        $response->assertOk();
        $response->assertViewIs('chapters.reregistration');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_website_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.website'));

        $response->assertOk();
        $response->assertViewIs('chapters.website');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_zapped_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.zapped'));

        $response->assertOk();
        $response->assertViewIs('chapters.zapped');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_zapped_chapter_view_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get('chapter/zapped/view/{id}');

        $response->assertOk();
        $response->assertViewIs('chapters.zapview');

        // TODO: perform additional assertions
    }

    #[Test]
    public function status_view_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.statusview', ['id' => $chapter->id]));

        $response->assertOk();
        $response->assertViewIs('chapters.reportstatus');

        // TODO: perform additional assertions
    }

    #[Test]
    public function store_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapters.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/chapter/list');

        // TODO: perform additional assertions
    }

    #[Test]
    public function store_financial_report_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $financialReport = \App\Models\FinancialReport::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('chapter.storefinancial', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    #[Test]
    public function un_zapped_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $chapter = \App\Models\Chapter::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get('chapter/unzap/{id}');

        $response->assertRedirect('/chapter/list');

        // TODO: perform additional assertions
    }

    #[Test]
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapters.update', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/chapter/list');

        // TODO: perform additional assertions
    }

    #[Test]
    public function update_awards_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapter.updateawards', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/yearreports/chapterawards');

        // TODO: perform additional assertions
    }

    #[Test]
    public function update_boundary_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapter.updateboundary', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/yearreports/boundaryissue');

        // TODO: perform additional assertions
    }

    #[Test]
    public function update_status_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $financialReport = \App\Models\FinancialReport::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapter.updatestatus', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/yearreports/eoystatus');

        // TODO: perform additional assertions
    }

    #[Test]
    public function update_website_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapter.updateweb', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/chapter/website');

        // TODO: perform additional assertions
    }

    #[Test]
    public function update_zapped_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapter = \App\Models\Chapter::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('chapter.updatezapped', ['id' => $chapter->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/chapter/list');

        // TODO: perform additional assertions
    }

    #[Test]
    public function zapped_inquiries_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('chapter.inquirieszapped'));

        $response->assertOk();
        $response->assertViewIs('chapters.inquirieszapped');

        // TODO: perform additional assertions
    }

    // test cases...
}
