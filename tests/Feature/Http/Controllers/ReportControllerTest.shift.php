<?php

namespace Tests\Feature\Http\Controllers;

use PHPUnit\Framework\Attributes\Test;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\ReportController
 */
class ReportControllerTest extends TestCase
{
    use RefreshDatabase;

    #[Test]
    public function show_add_awards_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.addawards'));

        $response->assertOk();
        $response->assertViewIs('reports.addawards');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_appreciation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.appreciation'));

        $response->assertOk();
        $response->assertViewIs('reports.appreciation');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_birthday_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.birthday'));

        $response->assertOk();
        $response->assertViewIs('reports.birthday');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_boardlist_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.boardlist'));

        $response->assertOk();
        $response->assertViewIs('reports.boardlist');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_chapter_awards_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.awards'));

        $response->assertOk();
        $response->assertViewIs('reports.chapteraward');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_chapter_coordinators_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.chaptercoordinators'));

        $response->assertOk();
        $response->assertViewIs('reports.chaptercoordinators');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_chapter_large_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.chapterlarge'));

        $response->assertOk();
        $response->assertViewIs('reports.chapterlarge');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_chapter_new_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.chapternew'));

        $response->assertOk();
        $response->assertViewIs('reports.chapternew');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_chapter_probation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.chapterprobation'));

        $response->assertOk();
        $response->assertViewIs('reports.chapterprobation');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_chapter_status_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.chapterstatus'));

        $response->assertOk();
        $response->assertViewIs('reports.chapterstatus');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_chapter_volunteer_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.chaptervolunteer'));

        $response->assertOk();
        $response->assertViewIs('reports.chaptervolunteer');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_coordinator_to_do_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.coordinatortodo'));

        $response->assertOk();
        $response->assertViewIs('reports.coordinatortodo');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_downloads_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.downloads'));

        $response->assertOk();
        $response->assertViewIs('reports.downloads');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_duplicate_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('report.duplicateuser'));

        $response->assertOk();
        $response->assertViewIs('reports.duplicateuser');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_duplicate_id_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('report.duplicateboardid'));

        $response->assertOk();
        $response->assertViewIs('reports.duplicateboardid');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_e_i_nstatus_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.einstatus'));

        $response->assertOk();
        $response->assertViewIs('reports.einstatus');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_e_o_y_status_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.eoystatus'));

        $response->assertOk();
        $response->assertViewIs('reports.eoystatus');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_int_coordinator_to_do_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.intcoordinatortodo'));

        $response->assertOk();
        $response->assertViewIs('reports.intcoordinatortodo');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_int_e_i_nstatus_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.inteinstatus'));

        $response->assertOk();
        $response->assertViewIs('reports.inteinstatus');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_int_m2_mdonation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.intm2mdonation'));

        $response->assertOk();
        $response->assertViewIs('reports.intm2mdonation');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_m2_mdonation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.m2mdonation'));

        $response->assertOk();
        $response->assertViewIs('reports.m2mdonation');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_multiple_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('report.multipleboard'));

        $response->assertOk();
        $response->assertViewIs('reports.multipleboard');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_no_president_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('report.nopresident'));

        $response->assertOk();
        $response->assertViewIs('reports.nopresident');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_outgoing_board_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('report.outgoingboard'));

        $response->assertOk();
        $response->assertViewIs('reports.outgoingboard');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_reminder_board_info_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapters = \App\Models\Chapter::factory()->times(3)->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.boardinforeminder'));

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_reminder_e_o_y_reports_late_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $chapters = \App\Models\Chapter::factory()->times(3)->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.eoylatereminder'));

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_report_to_board_info_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.boardinfo'));

        $response->assertRedirect('/yearreports/boardinfo');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_report_to_issues_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.issues'));

        $response->assertOk();
        $response->assertViewIs('reports.issues');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_report_to_review_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.review'));

        $response->assertOk();
        $response->assertViewIs('reports.review');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_reporting_tree_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.reportingtree'));

        $response->assertOk();
        $response->assertViewIs('reports.reportingtree');
        $response->assertViewHas('coordinator_array');
        $response->assertViewHas('cord_pos_id');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_social_media_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('report.socialmedia'));

        $response->assertOk();
        $response->assertViewIs('reports.socialmedia');

        // TODO: perform additional assertions
    }

    #[Test]
    public function store_activate_outgoing_board_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('report.outgoingactivate'), [
            // TODO: send request data
        ]);

        $response->assertRedirect('adminreports/outgoingboard');

        // TODO: perform additional assertions
    }

    // test cases...
}
