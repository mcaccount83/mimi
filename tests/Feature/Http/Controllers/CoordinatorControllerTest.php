<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\CoordinatorController
 */
class CoordinatorControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function appreciation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.appreciation', ['id' => $coordinator->id]));

        $response->assertOk();
        $response->assertViewIs('coordinators.appreciation');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function birthday_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.birthday', ['id' => $coordinator->id]));

        $response->assertOk();
        $response->assertViewIs('coordinators.birthday');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function create_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.create'));

        $response->assertOk();
        $response->assertViewIs('coordinators.create');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.edit', ['id' => $coordinator->id]));

        $response->assertOk();
        $response->assertViewIs('coordinators.edit');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_chapter_primary_for_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('get.chapterprimary'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_direct_reporting_list_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('get.directreport'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_region_list_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $coordinator = \App\Models\Coordinator::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('get.region', ['id' => $coordinator->id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_reporting_list_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('get.reporting'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function index_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.list'));

        $response->assertOk();
        $response->assertViewIs('coordinators.index');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_change_role_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.role', ['id' => $coordinator->id]));

        $response->assertOk();
        $response->assertViewIs('coordinators.role');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_dashboard_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.showdashboard'));

        $response->assertOk();
        $response->assertViewIs('coordinators.dashboard');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_int_coordinator_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('coordinator.inter'));

        $response->assertOk();
        $response->assertViewIs('coordinators.international');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_int_coordinator_view_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.interview', ['id' => $coordinator->id]));

        $response->assertOk();
        $response->assertViewIs('coordinators.interview');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_int_ret_coordinator_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('coordinator.retinter'));

        $response->assertOk();
        $response->assertViewIs('coordinators.retiredinternational');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_int_ret_coordinator_view_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.retinterview', ['id' => $coordinator->id]));

        $response->assertOk();
        $response->assertViewIs('coordinators.retinterview');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_profile_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.showprofile'));

        $response->assertOk();
        $response->assertViewIs('coordinators.profile');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_retired_coordinator_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('coordinator.retired'));

        $response->assertOk();
        $response->assertViewIs('coordinators.retired');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_retired_coordinator_view_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get('coordinator/retired/view/{id}');

        $response->assertOk();
        $response->assertViewIs('coordinators.retiredview');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_unretired_coordinator_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $coordinator = \App\Models\Coordinator::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->get(route('coordinator.unretired', ['id' => $coordinator->id]));

        $response->assertRedirect('/coordinatorlist');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('coordinator.store'), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/coordinatorlist');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('coordinator.update', ['id' => $coordinator->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/coordinatorlist');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update2_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('coordinator.update2', ['id' => $coordinator->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/coordinatorlist');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_appreciation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('coordinator.updateappreciation', ['id' => $coordinator->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/reports/appreciation');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_birthday_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('coordinator.updatebirthday', ['id' => $coordinator->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/reports/birthday');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_dashboard_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('coordinator.updatedashboard', ['id' => $coordinator->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/coordinator/dashboard');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_profile_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('coordinator.updateprofile', ['id' => $coordinator->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/coordinator/profile');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_role_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinator = \App\Models\Coordinator::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('coordinator.updaterole', ['id' => $coordinator->id]), [
            // TODO: send request data
        ]);

        $response->assertRedirect('/coordinator/retired');

        // TODO: perform additional assertions
    }

    // test cases...
}
