<?php

namespace Tests\Feature\Http\Controllers;

use PHPUnit\Framework\Attributes\Test;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\AdminController
 */
final class AdminControllerTest extends TestCase
{
    use RefreshDatabase;

    #[Test]
    public function addprogression_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\AdminController::class,
            'addProgression',
            \App\Http\Requests\AddProgressionAdminRequest::class
        );
    }

    #[Test]
    public function add_progression_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('admin.addprogression'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function addresources_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\AdminController::class,
            'addResources',
            \App\Http\Requests\AddResourcesAdminRequest::class
        );
    }

    #[Test]
    public function add_resources_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('admin.addresources'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function addtoolkit_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\AdminController::class,
            'addToolkit',
            \App\Http\Requests\AddToolkitAdminRequest::class
        );
    }

    #[Test]
    public function add_toolkit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('admin.addtoolkit'), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_progression_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('admin.progression'));

        $response->assertOk();
        $response->assertViewIs('admin.progression');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_resources_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('admin.resources'));

        $response->assertOk();
        $response->assertViewIs('admin.resources');

        // TODO: perform additional assertions
    }

    #[Test]
    public function show_toolkit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('admin.toolkit'));

        $response->assertOk();
        $response->assertViewIs('admin.toolkit');

        // TODO: perform additional assertions
    }

    #[Test]
    public function updateprogression_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\AdminController::class,
            'updateProgression',
            \App\Http\Requests\UpdateProgressionAdminRequest::class
        );
    }

    #[Test]
    public function update_progression_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $admin = \App\Models\Admin::factory()->create();
        $user = \App\Models\User::factory()->create();

        $response = $this->actingAs($user)->post(route('admin.updateprogression', ['id' => $admin->id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function updateresources_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\AdminController::class,
            'updateResources',
            \App\Http\Requests\UpdateResourcesAdminRequest::class
        );
    }

    #[Test]
    public function update_resources_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $resources = \App\Models\Resources::factory()->create();
        $admin = \App\Models\Admin::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('admin.updateresources', ['id' => $admin->id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function updatetoolkit_validates_with_a_form_request(): void
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\AdminController::class,
            'updateToolkit',
            \App\Http\Requests\UpdateToolkitAdminRequest::class
        );
    }

    #[Test]
    public function update_toolkit_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $resources = \App\Models\Resources::factory()->create();
        $admin = \App\Models\Admin::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->post(route('admin.updatetoolkit', ['id' => $admin->id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
