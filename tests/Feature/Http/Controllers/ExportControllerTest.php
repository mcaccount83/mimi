<?php

namespace Tests\Feature\Http\Controllers;

use PHPUnit\Framework\Attributes\Test;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\ExportController
 */
final class ExportControllerTest extends TestCase
{
    use RefreshDatabase;

    #[Test]
    public function export_appreciation_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinatorDetails = \App\Models\CoordinatorDetails::factory()->times(3)->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.appreciation'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_board_election_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.boardelection'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.chapter', ['id' => $id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_chapter_award_list_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.chapteraward', ['id' => $id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_chapter_coordinator_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.chaptercoordinator'));

        $response->assertRedirect('/home');

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_coordinator_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.coordinator', ['id' => $id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_e_i_n_status_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.einstatus'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_e_o_y_status_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.eoystatus'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_int_coordinator_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.intcoordinator'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_int_e_i_n_status_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.inteinstatus'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_int_e_o_y_status_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.inteoystatus'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_int_re_reg_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.intrereg'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_int_ret_coordinator_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.intretcoordinator'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_international_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.intchapter'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_international_zap_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.intzapchapter'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_re_reg_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.rereg'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_retired_coordinator_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $coordinatorDetails = \App\Models\CoordinatorDetails::factory()->times(3)->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.retiredcoordinator'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    #[Test]
    public function export_zapped_chapter_returns_an_ok_response(): void
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = \App\Models\User::factory()->create();
        $authUser = \App\Models\User::factory()->create();

        $response = $this->actingAs($authUser)->get(route('export.zapchapter'));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
